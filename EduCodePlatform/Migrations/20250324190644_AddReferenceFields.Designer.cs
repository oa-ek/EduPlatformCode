// <auto-generated />
using System;
using EduCodePlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduCodePlatform.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250324190644_AddReferenceFields")]
    partial class AddReferenceFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduCodePlatform.Data.Entities.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BadgeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BadgeId"));

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Criteria");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IconUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("BadgeId");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.BattleParticipant", b =>
                {
                    b.Property<int>("BattleParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BattleParticipantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BattleParticipantId"));

                    b.Property<int>("BattleId")
                        .HasColumnType("int")
                        .HasColumnName("BattleId");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("JoinedAt");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("BattleParticipantId");

                    b.HasIndex("BattleId");

                    b.HasIndex("UserId");

                    b.ToTable("BattleParticipant");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodeAnalysisReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AnalysisDate");

                    b.Property<int>("CodeSubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("CodeSubmissionId");

                    b.Property<float>("PerformanceScore")
                        .HasColumnType("real")
                        .HasColumnName("PerformanceScore");

                    b.Property<string>("ReportDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ReportDetails");

                    b.Property<float>("SecurityScore")
                        .HasColumnType("real")
                        .HasColumnName("SecurityScore");

                    b.Property<float>("StyleScore")
                        .HasColumnType("real")
                        .HasColumnName("StyleScore");

                    b.HasKey("ReportId");

                    b.HasIndex("CodeSubmissionId");

                    b.ToTable("CodeAnalysisReport");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodeSubmissionHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ChangedAt");

                    b.Property<string>("CodeSnapshot")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CodeSnapshot");

                    b.Property<int>("CodeSubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("CodeSubmissionId");

                    b.HasKey("HistoryId");

                    b.HasIndex("CodeSubmissionId");

                    b.ToTable("CodeSubmissionHistory");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodeTestResult", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestResultId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestResultId"));

                    b.Property<int>("CodeSubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("CodeSubmissionId");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Output");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit")
                        .HasColumnName("Passed");

                    b.Property<DateTime>("RunAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("RunAt");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TestName");

                    b.HasKey("TestResultId");

                    b.HasIndex("CodeSubmissionId");

                    b.ToTable("CodeTestResult");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodingBattle", b =>
                {
                    b.Property<int>("BattleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BattleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BattleId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("BattleId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CodingBattle");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodingTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int")
                        .HasColumnName("DifficultyId");

                    b.Property<bool>("IsAIgenerated")
                        .HasColumnType("bit")
                        .HasColumnName("IsAIgenerated");

                    b.Property<string>("ReferenceCss")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ReferenceCss");

                    b.Property<string>("ReferenceHtml")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ReferenceHtml");

                    b.Property<string>("ReferenceJs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ReferenceJs");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("TaskId");

                    b.HasIndex("DifficultyId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.DailyChallenge", b =>
                {
                    b.Property<int>("DailyChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DailyChallengeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyChallengeId"));

                    b.Property<DateTime>("ChallengeDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ChallengeDate");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("DailyChallengeId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("DailyChallenge");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.DailyChallengeSubmission", b =>
                {
                    b.Property<int>("DailyChallengeSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DailyChallengeSubmissionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyChallengeSubmissionId"));

                    b.Property<int>("CodeSubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("CodeSubmissionId");

                    b.Property<int>("DailyChallengeId")
                        .HasColumnType("int")
                        .HasColumnName("DailyChallengeId");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubmittedAt");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("DailyChallengeSubmissionId");

                    b.HasIndex("CodeSubmissionId");

                    b.HasIndex("DailyChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyChallengeSubmission");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.EditorSetting", b =>
                {
                    b.Property<int>("EditorSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EditorSettingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EditorSettingId"));

                    b.Property<int>("TabSize")
                        .HasColumnType("int")
                        .HasColumnName("TabSize");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Theme");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("EditorSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("EditorSetting");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LanguageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("LanguageId");

                    b.ToTable("ProgrammingLanguage");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("OwnerId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("ProjectId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.ProjectCollaborator", b =>
                {
                    b.Property<int>("ProjectCollaboratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectCollaboratorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectCollaboratorId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("ProjectCollaboratorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectCollaborator");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.PullRequest", b =>
                {
                    b.Property<int>("PullRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PullRequestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PullRequestId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("PullRequestId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("PullRequest");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.PullRequestComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CommentText");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("PullRequestId")
                        .HasColumnType("int")
                        .HasColumnName("PullRequestId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("CommentId");

                    b.HasIndex("PullRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("PullRequestComment");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.TaskDifficulty", b =>
                {
                    b.Property<int>("DifficultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DifficultyId"));

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DifficultyName");

                    b.HasKey("DifficultyId");

                    b.ToTable("TaskDifficulty");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.TaskSubmission", b =>
                {
                    b.Property<int>("TaskSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskSubmissionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskSubmissionId"));

                    b.Property<int>("CodeSubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("CodeSubmissionId");

                    b.Property<bool>("PassedAllTests")
                        .HasColumnType("bit")
                        .HasColumnName("PassedAllTests");

                    b.Property<float>("Score")
                        .HasColumnType("real")
                        .HasColumnName("Score");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubmittedAt");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskId");

                    b.HasKey("TaskSubmissionId");

                    b.HasIndex("CodeSubmissionId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskSubmission");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.TaskTestCase", b =>
                {
                    b.Property<int>("TestCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestCaseId"));

                    b.Property<string>("CssRules")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CssRules");

                    b.Property<string>("ExpectedJsOutput")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExpectedJsOutput");

                    b.Property<string>("HtmlRules")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("HtmlRules");

                    b.Property<string>("InputData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("InputData");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskId");

                    b.Property<int>("TimeLimitSeconds")
                        .HasColumnType("int");

                    b.HasKey("TestCaseId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskTestCase");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.UserBadge", b =>
                {
                    b.Property<int>("UserBadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserBadgeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserBadgeId"));

                    b.Property<DateTime>("AwardedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("AwardedAt");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("BadgeId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("UserBadgeId");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBadge");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.UserProgress", b =>
                {
                    b.Property<int>("UserProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserProgressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProgressId"));

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("XP")
                        .HasColumnType("int")
                        .HasColumnName("XP");

                    b.HasKey("UserProgressId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("EduCodePlatform.Models.Entities.CodeSubmission", b =>
                {
                    b.Property<int>("CodeSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodeSubmissionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeSubmissionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CssCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CssCode");

                    b.Property<string>("HtmlCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("HtmlCode");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("IsPublic");

                    b.Property<string>("JsCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("JsCode");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("CodeSubmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("CodeSubmission");
                });

            modelBuilder.Entity("EduCodePlatform.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserToken", (string)null);
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.BattleParticipant", b =>
                {
                    b.HasOne("EduCodePlatform.Data.Entities.CodingBattle", "CodingBattle")
                        .WithMany()
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CodingBattle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodeAnalysisReport", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Entities.CodeSubmission", "CodeSubmission")
                        .WithMany()
                        .HasForeignKey("CodeSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSubmission");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodeSubmissionHistory", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Entities.CodeSubmission", "CodeSubmission")
                        .WithMany()
                        .HasForeignKey("CodeSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSubmission");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodeTestResult", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Entities.CodeSubmission", "CodeSubmission")
                        .WithMany()
                        .HasForeignKey("CodeSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSubmission");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodingBattle", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.CodingTask", b =>
                {
                    b.HasOne("EduCodePlatform.Data.Entities.TaskDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.DailyChallenge", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.DailyChallengeSubmission", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Entities.CodeSubmission", "CodeSubmission")
                        .WithMany()
                        .HasForeignKey("CodeSubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Data.Entities.DailyChallenge", "DailyChallenge")
                        .WithMany()
                        .HasForeignKey("DailyChallengeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSubmission");

                    b.Navigation("DailyChallenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.EditorSetting", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.Project", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.ProjectCollaborator", b =>
                {
                    b.HasOne("EduCodePlatform.Data.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.PullRequest", b =>
                {
                    b.HasOne("EduCodePlatform.Data.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.PullRequestComment", b =>
                {
                    b.HasOne("EduCodePlatform.Data.Entities.PullRequest", "PullRequest")
                        .WithMany()
                        .HasForeignKey("PullRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PullRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.TaskSubmission", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Entities.CodeSubmission", "CodeSubmission")
                        .WithMany()
                        .HasForeignKey("CodeSubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Data.Entities.CodingTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CodeSubmission");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.TaskTestCase", b =>
                {
                    b.HasOne("EduCodePlatform.Data.Entities.CodingTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.UserBadge", b =>
                {
                    b.HasOne("EduCodePlatform.Data.Entities.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Data.Entities.UserProgress", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCodePlatform.Models.Entities.CodeSubmission", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EduCodePlatform.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
